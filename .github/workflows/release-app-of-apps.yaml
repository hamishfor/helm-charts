name: Release App of Apps Chart

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main

jobs:
  release:
    permissions:
      contents: write
      packages: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633 # v4.1.2 pinned
        with:
          fetch-depth: 0

      - uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4 pinned
        with:
          node-version: 20
          cache: npm

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v4

      - uses: engineerd/configurator@v0.0.10
        with:
          name: "helm-docs"
          url: "https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_x86_64.tar.gz"
          pathInArchive: "helm-docs"

      - uses: engineerd/configurator@v0.0.10
        with:
          name: "cr"
          url: "https://github.com/helm/chart-releaser/releases/download/v1.6.0/chart-releaser_1.6.0_linux_amd64.tar.gz"
          pathInArchive: "cr"

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v43
        with:
          dir_names_max_depth: 3
          dir_names_exclude_current_dir: "true"
          dir_names: "true"
          files: |
            charts/argocd-apps/**
            charts/**/templates/**/*.yaml

      - name: Helm Deps
        run: |
          set -euo pipefail
          retry() {
            local n=0
            local max=5
            local delay=2
            until "$@"; do
              n=$((n+1))
              if [ $n -ge $max ]; then
                echo "Command failed after $n attempts: $*"
                return 1
              fi
              sleep $delay
              delay=$((delay*2))
            done
          }

          ITER=0
          for dir in $(find charts -name Chart.lock -exec dirname {} \;); do
            pushd "$dir"
            for url in $(grep repository Chart.yaml | awk '{print $2}' | sort | uniq); do
              retry helm repo add repo${ITER} ${url}
              ITER=$(expr $ITER + 1)
            done
            retry helm dependency build
            popd
          done

      - name: Bump version
        if: steps.changed-files.outputs.any_changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.CR_TOKEN_2 }}
          CR_TOKEN: "${{ secrets.CR_TOKEN_2 }}"
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          set -euo pipefail

          retry() {
            local n=0
            local max=5
            local delay=2
            until "$@"; do
              n=$((n+1))
              if [ $n -ge $max ]; then
                echo "Command failed after $n attempts: $*"
                return 1
              fi
              sleep $delay
              delay=$((delay*2))
            done
          }

          retry npm ci
          mkdir -p .cr-release-packages

          # Extract unique chart directories robustly (supports nested paths)
          CHART_DIRS=()
          add_chart_dir() {
            local candidate="$1"
            for existing in "${CHART_DIRS[@]}"; do
              if [ "$existing" = "$candidate" ]; then
                return 0
              fi
            done
            CHART_DIRS+=("$candidate")
          }

          IFS=' ' read -r -a FILES <<< "${ALL_CHANGED_FILES:-}"

          for file in "${FILES[@]}"; do
            [ -f "$file" ] || continue
            path="$file"
            while [ "$path" != "." ] && [ "$path" != "/" ]; do
              if [[ "$path" == charts/* ]] && [ -f "$path/Chart.yaml" ]; then
                add_chart_dir "$path"
                break
              fi
              path=$(dirname "$path")
            done
          done

          if [ "${#CHART_DIRS[@]}" -eq 0 ]; then
            echo "No chart roots detected in changed files list; exiting."
            exit 0
          fi

          for dir in "${CHART_DIRS[@]}"; do
            echo "Processing chart: $dir"
            pushd "$dir" >/dev/null

            cp -f ../../.github/cr.yaml ./
            cp -f ../../.github/release.config.cjs ./
            rm -f .cr-release-packages || true
            ln -sf ../../.cr-release-packages

            # Build / verify dependencies first with retry
            if [ -f Chart.yaml ]; then
              ITER=0
              for url in $(grep -E '^[[:space:]]*repository:' Chart.yaml | awk '{print $2}' | sort -u); do
                retry helm repo add dep${ITER} "${url}" || true
                ITER=$((ITER+1))
              done
              retry helm dependency build
            fi

            export CHART_NAME
            CHART_NAME=$(basename "$PWD")
            # Semantic release decides next version
            retry npx semantic-release

            # Ensure no unexpected leftover modifications (defensive)
            if ! git diff --quiet; then
              echo "Unexpected uncommitted changes after semantic-release in $dir"
              git status --short
              exit 1
            fi
            popd >/dev/null
          done

          echo "CR Index"
          if [ "$(ls -A .cr-release-packages)" ]; then
            retry cr index -o "hamishfor" -r "helm-charts" --push --packages-with-index --index-path .
          else
            echo "No new packages; skipping index."
          fi

